#!/bin/bash

# Wohnungs√ºbergabe Docker Management Script
# Behebt Docker Compose Probleme und f√ºhrt Datenbankreparaturen durch

echo "üè† Wohnungs√ºbergabe Docker Management"
echo "===================================="

# Pr√ºfe welcher Docker Compose Befehl verf√ºgbar ist
if command -v "docker" &> /dev/null; then
    if docker compose version &> /dev/null; then
        DOCKER_COMPOSE="docker compose"
        echo "‚úÖ Docker Compose (Plugin) gefunden"
    elif command -v "docker-compose" &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
        echo "‚úÖ Docker Compose (Standalone) gefunden"
    else
        echo "‚ùå Docker Compose nicht gefunden!"
        echo "Bitte installieren Sie Docker Compose:"
        echo "https://docs.docker.com/compose/install/"
        exit 1
    fi
else
    echo "‚ùå Docker nicht gefunden!"
    echo "Bitte installieren Sie Docker Desktop:"
    echo "https://docs.docker.com/desktop/"
    exit 1
fi

echo "üìã Verwende: $DOCKER_COMPOSE"
echo ""

# Funktion f√ºr Container-Status
check_containers() {
    echo "üìä Container Status:"
    $DOCKER_COMPOSE ps
    echo ""
}

# Funktion zum Starten der Services
start_services() {
    echo "üöÄ Starte Services..."
    $DOCKER_COMPOSE up -d
    echo "‚è≥ Warte auf Datenbank..."
    sleep 10
    check_containers
}

# Funktion f√ºr Datenbankreparatur
repair_database() {
    echo "üîß Repariere Datenbank..."
    
    # Pr√ºfe ob App-Container l√§uft
    if ! $DOCKER_COMPOSE ps app | grep -q "Up"; then
        echo "‚ùå App-Container l√§uft nicht. Starte Services..."
        start_services
    fi
    
    echo "üì¶ Versuche erweiterte Reparatur mit Composer..."
    
    # Versuche erst die erweiterte Reparatur
    if $DOCKER_COMPOSE exec app composer install --no-dev --optimize-autoloader 2>/dev/null; then
        echo "‚úÖ Composer-Abh√§ngigkeiten installiert"
        
        if $DOCKER_COMPOSE exec app php fix_database_issues.php; then
            echo "‚úÖ Erweiterte Datenbankreparatur erfolgreich"
            echo "üîç F√ºhre Verifikation durch..."
            $DOCKER_COMPOSE exec app php verify_repairs.php
            return 0
        else
            echo "‚ö†Ô∏è Erweiterte Reparatur fehlgeschlagen, verwende einfache Reparatur..."
        fi
    else
        echo "‚ö†Ô∏è Composer nicht verf√ºgbar, verwende einfache Reparatur..."
    fi
    
    # Fallback: Einfache Reparatur ohne Abh√§ngigkeiten
    echo "‚ö° F√ºhre einfache Datenbankreparatur durch..."
    $DOCKER_COMPOSE exec app php simple_repair.php
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Einfache Datenbankreparatur erfolgreich"
        return 0
    else
        echo "‚ùå Datenbankreparatur fehlgeschlagen"
        echo ""
        echo "üîç Debug-Informationen:"
        echo "Container Status:"
        $DOCKER_COMPOSE ps
        echo ""
        echo "App-Container Logs:"
        $DOCKER_COMPOSE logs --tail=20 app
        return 1
    fi
}

# Funktion f√ºr Logs
show_logs() {
    echo "üìù Application Logs:"
    $DOCKER_COMPOSE logs app web
}

# Hauptmen√º
show_menu() {
    echo "W√§hlen Sie eine Aktion:"
    echo "1) Services starten"
    echo "2) Container Status pr√ºfen"
    echo "3) Datenbank reparieren"
    echo "4) Logs anzeigen"
    echo "5) In App-Container einsteigen"
    echo "6) Services stoppen"
    echo "7) Alles neu starten"
    echo "0) Beenden"
    echo ""
    read -p "Ihre Wahl [0-7]: " choice
}

# Hauptlogik
case "${1:-menu}" in
    "start")
        start_services
        ;;
    "status")
        check_containers
        ;;
    "repair")
        repair_database
        ;;
    "logs")
        show_logs
        ;;
    "shell")
        echo "üêö √ñffne Shell im App-Container..."
        $DOCKER_COMPOSE exec app bash
        ;;
    "stop")
        echo "üõë Stoppe Services..."
        $DOCKER_COMPOSE down
        ;;
    "restart")
        echo "üîÑ Starte Services neu..."
        $DOCKER_COMPOSE down
        $DOCKER_COMPOSE up -d
        sleep 10
        check_containers
        ;;
    "menu"|"")
        while true; do
            show_menu
            case $choice in
                1)
                    start_services
                    ;;
                2)
                    check_containers
                    ;;
                3)
                    repair_database
                    ;;
                4)
                    show_logs
                    ;;
                5)
                    echo "üêö √ñffne Shell im App-Container..."
                    $DOCKER_COMPOSE exec app bash
                    ;;
                6)
                    echo "üõë Stoppe Services..."
                    $DOCKER_COMPOSE down
                    break
                    ;;
                7)
                    echo "üîÑ Starte Services neu..."
                    $DOCKER_COMPOSE down
                    $DOCKER_COMPOSE up -d
                    sleep 10
                    check_containers
                    ;;
                0)
                    echo "üëã Auf Wiedersehen!"
                    break
                    ;;
                *)
                    echo "‚ùå Ung√ºltige Auswahl!"
                    ;;
            esac
            echo ""
        done
        ;;
    *)
        echo "Verwendung: $0 [start|status|repair|logs|shell|stop|restart|menu]"
        echo ""
        echo "Verf√ºgbare Befehle:"
        echo "  start   - Services starten"
        echo "  status  - Container Status"
        echo "  repair  - Datenbank reparieren"
        echo "  logs    - Logs anzeigen"
        echo "  shell   - Shell im App-Container"
        echo "  stop    - Services stoppen"
        echo "  restart - Services neu starten"
        echo "  menu    - Interaktives Men√º"
        exit 1
        ;;
esac
