<?php
declare(strict_types=1);
namespace App\Controllers;

use App\Auth;
use App\Database;
use App\View;
use PDO;

final class StatsController {
  public function index(): void {
    Auth::requireAuth();
    $pdo  = Database::pdo();
    $year = (int)($_GET['year'] ?? (int)date('Y'));
    if ($year < 2000 || $year > 2100) $year = (int)date('Y');

    // ---- Protokolle (für Fluktuation, Monate, Qualitätsscore) ----
    $st = $pdo->query("
      SELECT p.id, p.unit_id, p.type, p.payload, p.created_at,
             u.label AS unit_label, o.id AS object_id, o.city, o.postal_code, o.street, o.house_no
      FROM protocols p
      JOIN units u ON u.id=p.unit_id
      JOIN objects o ON o.id=u.object_id
      WHERE p.deleted_at IS NULL
      ORDER BY o.city,o.street,o.house_no,u.label,p.created_at
    ");
    $rows = $st->fetchAll(PDO::FETCH_ASSOC);

    // ---- Einheiten je Haus (für Quote) ----
    $unitsByHouse = [];
    $rs = $pdo->query("SELECT object_id, COUNT(*) AS n FROM units GROUP BY object_id");
    foreach ($rs->fetchAll(PDO::FETCH_ASSOC) as $r) $unitsByHouse[$r['object_id']] = (int)$r['n'];

    // ---- Durchlaufzeiten Draft -> Finish (Minuten) ----
    $durSamples = [];
    $rs = $pdo->query("SELECT TIMESTAMPDIFF(MINUTE, created_at, updated_at) AS minutes
                        FROM protocol_drafts
                        WHERE status='finished' AND created_at IS NOT NULL AND updated_at IS NOT NULL");
    foreach ($rs->fetchAll(PDO::FETCH_ASSOC) as $r) {
      $m = (int)($r['minutes'] ?? 0); if ($m >= 0) $durSamples[] = $m;
    }

    // ---- Fotos pro Protokoll ----
    $photosByProtocol = [];
    $rs = $pdo->query("SELECT protocol_id, COUNT(*) AS n FROM protocol_files WHERE protocol_id IS NOT NULL GROUP BY protocol_id");
    foreach ($rs->fetchAll(PDO::FETCH_ASSOC) as $r) $photosByProtocol[$r['protocol_id']] = (int)$r['n'];

    // Helper
    $payload = fn($r) => (json_decode((string)($r['payload'] ?? '{}'), true) ?: []);
    $tsOf    = function(array $p, $created) {
      $ts=(string)($p['timestamp']??''); $ts=str_replace('T',' ',$ts);
      return $ts?strtotime($ts):strtotime((string)$created);
    };
    $toFloat = function($v){ if($v===''||$v===null) return null; $s=str_replace([',',' '],['.',''],(string)$v); return is_numeric($s)?(float)$s:null; };

    // ---- Aggregation: Fluktuation, Monate, Saisonalität ----
    $flukByHouse=[]; $flukByUnit=[];
    $monthsAll = array_fill(1,12,0);
    $monthsEin = array_fill(1,12,0);
    $monthsAus = array_fill(1,12,0);
    $byUnit=[]; $zwischen=0; $total=0;

    foreach($rows as $r){
      $p=$payload($r); $t=$tsOf($p,$r['created_at']);
      $byUnit[$r['unit_id']][] = ['type'=>$r['type'],'ts'=>$t,'meters'=>($p['meters']??[]),'object_id'=>$r['object_id']];

      if($r['type']==='auszug'){
        $hid=$r['object_id'];
        if(!isset($flukByHouse[$hid])){
          $flukByHouse[$hid] = ['postal'=>$r['postal_code'],'city'=>$r['city'],'street'=>$r['street'],'house_no'=>$r['house_no'],'count'=>0];
        }
        $flukByHouse[$hid]['count']++;

        $uid=$r['unit_id'];
        if(!isset($flukByUnit[$uid])){
          $flukByUnit[$uid] = ['postal'=>$r['postal_code'],'city'=>$r['city'],'street'=>$r['street'],'house_no'=>$r['house_no'],'unit_label'=>$r['unit_label'],'count'=>0];
        }
        $flukByUnit[$uid]['count']++;
      }

      $ct = strtotime((string)$r['created_at']);
      if ((int)date('Y',$ct)===$year) {
        $m=(int)date('n',$ct);
        $monthsAll[$m]++;
        if ($r['type']==='einzug') $monthsEin[$m]++;
        if ($r['type']==='auszug') $monthsAus[$m]++;
      }

      if ($r['type']==='zwischen') $zwischen++;
      $total++;
    }

    // ---- Mietdauer & Zähler-Δ ----
    $meterKeys = [
      "strom_we"=>"Strom (WE)","strom_allg"=>"Strom (Allg.)",
      "gas_we"=>"Gas (WE)","gas_allg"=>"Gas (Allg.)",
      "wasser_kueche_kalt"=>"Wasser Küche (kalt)","wasser_kueche_warm"=>"Wasser Küche (warm)",
      "wasser_bad_kalt"=>"Wasser Bad (kalt)","wasser_bad_warm"=>"Wasser Bad (warm)",
      "wasser_wm"=>"Wasser WM"
    ];
    $durDays=[]; $mAgg=[]; foreach(array_keys($meterKeys) as $k) $mAgg[$k]=['sum'=>0.0,'n'=>0];

    foreach($byUnit as $uid=>$evs){
      usort($evs,fn($a,$b)=>$a['ts']<=>$b['ts']);
      $einTs=null; $einMeters=null;
      foreach($evs as $ev){
        if($ev['type']==='einzug'){ $einTs=$ev['ts']; $einMeters=$ev['meters']; }
        elseif($ev['type']==='auszug' && $einTs!==null){
          $durDays[] = max(0,(int)floor(($ev['ts']-$einTs)/86400));
          foreach($mAgg as $k=>$_){
            $a=$toFloat($einMeters[$k]['val']??null); $b=$toFloat($ev['meters'][$k]['val']??null);
            if($a!==null && $b!==null){ $mAgg[$k]['sum']+=($b-$a); $mAgg[$k]['n']++; }
          }
          $einTs=null; $einMeters=null;
        }
      }
    }
    $avgDur = $durDays? round(array_sum($durDays)/count($durDays),1): null;
    $avgMeters=[]; foreach($mAgg as $k=>$v){ $avgMeters[$k]= $v['n']? round($v['sum']/$v['n'],2): null; }
    $zwischenPct = $total? round($zwischen/$total*100,1): 0.0;

    // ---- Fluktuationsquote pro Haus: sortiert nach Auszügen (desc) ----
    $flukQuote=[]; 
    foreach($flukByHouse as $hid=>$h){
      $we = $unitsByHouse[$hid] ?? 0;
      $q  = ($we>0)? round(($h['count']/$we)*100,1) : null;
      $flukQuote[] = [
        'postal'=>$h['postal'],'city'=>$h['city'],'street'=>$h['street'],'house_no'=>$h['house_no'],
        'we'=>$we,'auszuege'=>$h['count'],'quote'=>$q
      ];
    }
    usort($flukQuote, fn($a,$b)=> ($b['auszuege'] <=> $a['auszuege']) ?: (($b['quote'] ?? -1) <=> ($a['quote'] ?? -1)));

    // ---- Fluktuation nach Wohnung (Auszüge) – sortiert nach count desc ----
    $flukByUnitList = array_values($flukByUnit);
    usort($flukByUnitList, fn($a,$b)=> ($b['count'] <=> $a['count']));

    // ---- Saison: Arrays für Chart.js ----
    $labels=$dataEin=$dataAus=[];
    for($m=1;$m<=12;$m++){
      $labels[]  = date('M', mktime(0,0,0,$m,1,$year));
      $dataEin[] = $monthsEin[$m];
      $dataAus[] = $monthsAus[$m];
    }

    // ---- Render ----
    ob_start(); ?>
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h1 class="h4 mb-0">Statistik</h1>
      <form method="get" class="d-flex align-items-center gap-2">
        <label class="form-label mb-0">Jahr</label>
        <input class="form-control" style="width:110px" name="year" type="number" value="<?= (int)$year ?>">
        <button class="btn btn-primary">Anzeigen</button>
      </form>
    </div>

    <!-- Saisonale Spitzen -->
    <div class="card mb-3"><div class="card-body">
      <h2 class="h6 mb-2">Saisonale Spitzen (<?= (int)$year ?>)</h2>
      <canvas id="seasonChart" height="120"></canvas>
    </div></div>

    <!-- KPI-Karten -->
    <div class="row g-3 mb-3">
      <div class="col-md-4">
        <div class="card"><div class="card-body">
          <div class="text-muted small mb-1">Zwischenprotokolle</div>
          <div class="display-6"><?= (int)$zwischen ?></div>
          <div class="text-muted">Anteil: <?= htmlspecialchars((string)$zwischenPct) ?>%</div>
        </div></div>
      </div>
      <div class="col-md-4">
        <div class="card"><div class="card-body">
          <div class="text-muted small mb-1">Ø Mietdauer</div>
          <div class="display-6"><?= $avgDur!==null? $avgDur.' Tage':'—' ?></div>
        </div></div>
      </div>
      <div class="col-md-4">
        <div class="card"><div class="card-body">
          <div class="text-muted small mb-1">Hinweis</div>
          <div>Durchlaufzeit (Wizard Start→Finish): Median/90p kann bei Bedarf ergänzt werden (Drafts vorhanden).</div>
        </div></div>
      </div>
    </div>

    <!-- Fluktuation Haus & Wohnung NEBENEINANDER -->
    <div class="row g-3">
      <div class="col-lg-6">
        <div class="card"><div class="card-body">
          <h2 class="h6 mb-2">Fluktuation nach Haus (Auszüge) & Quote</h2>
          <div class="table-responsive">
            <table class="table table-sm">
              <thead><tr><th>PLZ Ort</th><th>Straße/Hausnr.</th><th class="text-end">WE</th><th class="text-end">Auszüge</th><th class="text-end">Quote %</th></tr></thead>
              <tbody>
              <?php foreach($flukQuote as $h): ?>
                <tr>
                  <td><?= htmlspecialchars((string)($h['postal']??'')) ?> <?= htmlspecialchars((string)$h['city']) ?></td>
                  <td><?= htmlspecialchars((string)$h['street']) ?> <?= htmlspecialchars((string)$h['house_no']) ?></td>
                  <td class="text-end"><?= (int)$h['we'] ?></td>
                  <td class="text-end"><?= (int)$h['auszuege'] ?></td>
                  <td class="text-end"><?= $h['quote']!==null? htmlspecialchars((string)$h['quote']) : '—' ?></td>
                </tr>
              <?php endforeach; if (!$flukQuote) echo '<tr><td colspan="5" class="text-muted">Keine Daten.</td></tr>'; ?>
              </tbody>
            </table>
          </div>
        </div></div>
      </div>

      <div class="col-lg-6">
        <div class="card"><div class="card-body">
          <h2 class="h6 mb-2">Fluktuation nach Wohnung (Auszüge)</h2>
          <div class="table-responsive">
            <table class="table table-sm">
              <thead><tr><th>PLZ Ort</th><th>Straße/Hausnr.</th><th>WE</th><th class="text-end">Auszüge</th></tr></thead>
              <tbody>
              <?php foreach($flukByUnitList as $u): ?>
                <tr>
                  <td><?= htmlspecialchars((string)($u['postal']??'')) ?> <?= htmlspecialchars((string)$u['city']) ?></td>
                  <td><?= htmlspecialchars((string)$u['street']) ?> <?= htmlspecialchars((string)$u['house_no']) ?></td>
                  <td><?= htmlspecialchars((string)$u['unit_label']) ?></td>
                  <td class="text-end"><?= (int)$u['count'] ?></td>
                </tr>
              <?php endforeach; if (!$flukByUnitList) echo '<tr><td colspan="4" class="text-muted">Keine Daten.</td></tr>'; ?>
              </tbody>
            </table>
          </div>
        </div></div>
      </div>
    </div>

    <!-- Zähler-Analyse GANZ UNTEN -->
    <div class="card mt-3"><div class="card-body">
      <h2 class="h6 mb-2">Zähler‑Analyse (Δ Auszug − Einzug, Mittelwerte)</h2>
      <div class="row">
        <?php
          $meterKeys = [
            "strom_we"=>"Strom (WE)","strom_allg"=>"Strom (Allg.)",
            "gas_we"=>"Gas (WE)","gas_allg"=>"Gas (Allg.)",
            "wasser_kueche_kalt"=>"Wasser Küche (kalt)","wasser_kueche_warm"=>"Wasser Küche (warm)",
            "wasser_bad_kalt"=>"Wasser Bad (kalt)","wasser_bad_warm"=>"Wasser Bad (warm)",
            "wasser_wm"=>"Wasser WM"
          ];
        ?>
        <?php foreach($meterKeys as $k=>$lbl): ?>
          <div class="col-md-6 col-lg-4">
            <div class="text-muted small mb-1"><?= htmlspecialchars($lbl) ?></div>
            <div class="display-6"><?= isset($avgMeters[$k]) && $avgMeters[$k]!==null ? htmlspecialchars((string)$avgMeters[$k]) : '—' ?></div>
          </div>
        <?php endforeach; ?>
      </div>
      <div class="small text-muted mt-2">Nur Paarungen Einzug→Auszug mit beidseitigen Ständen; Δ <em>Auszug − Einzug</em>.</div>
    </div></div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script>
    (function(){
      // Saison-Chart (Einzüge vs Auszüge)
      const ctx = document.getElementById('seasonChart');
      if (ctx) {
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: <?= json_encode($labels) ?>,
            datasets: [
              { label: 'Einzüge', data: <?= json_encode($dataEin) ?> },
              { label: 'Auszüge', data: <?= json_encode($dataAus) ?> }
            ]
          },
          options: {
            responsive: true,
            plugins: { legend: { position: 'bottom' } },
            scales: { y: { beginAtZero: true, ticks: { precision:0 } } }
          }
        });
      }
    })();
    </script>
    <?php
    View::render('Statistik', ob_get_clean());
  }
}
