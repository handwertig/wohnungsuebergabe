<?php
declare(strict_types=1);

namespace App;

use PDO;
use PDOException;

final class Settings
{
    /** Stellt sicher, dass die Tabelle app_settings vorhanden ist (idempotent). */
    private static function ensureTable(PDO $pdo): void
    {
        static $checked = false;
        if ($checked) return;

        // PrÃ¼fen, ob Tabelle existiert
        try {
            $pdo->query("SELECT 1 FROM `app_settings` LIMIT 1");
            $checked = true;
            return;
        } catch (PDOException $e) {
            // 42S02 = Table not found
            if ($e->getCode() !== '42S02') throw $e;
        }

        // Anlegen (idempotent)
        $sql = "CREATE TABLE IF NOT EXISTS `app_settings` (
                  `key`   VARCHAR(190) NOT NULL PRIMARY KEY,
                  `value` TEXT NULL
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
        $pdo->exec($sql);
        $checked = true;
    }

    public static function get(string $key, $default = null)
    {
        $pdo = Database::pdo();
        self::ensureTable($pdo);

        $st  = $pdo->prepare('SELECT `value` FROM `app_settings` WHERE `key` = ? LIMIT 1');
        $st->execute([$key]);
        $v = $st->fetchColumn();
        return ($v === false) ? $default : $v;
    }

    public static function set(string $key, string $value): void
    {
        $pdo = Database::pdo();
        self::ensureTable($pdo);

        $st = $pdo->prepare(
            'INSERT INTO `app_settings`(`key`,`value`) VALUES(?,?)
             ON DUPLICATE KEY UPDATE `value` = VALUES(`value`)'
        );
        $st->execute([$key, $value]);
    }

    /** @param array<string,string> $data */
    public static function setMany(array $data): void
    {
        if (!$data) return;

        $pdo = Database::pdo();
        self::ensureTable($pdo);

        $pdo->beginTransaction();
        try {
            $st = $pdo->prepare(
                'INSERT INTO `app_settings`(`key`,`value`) VALUES(?,?)
                 ON DUPLICATE KEY UPDATE `value` = VALUES(`value`)'
            );
            foreach ($data as $k => $v) {
                $st->execute([$k, (string)$v]);
            }
            $pdo->commit();
        } catch (\Throwable $e) {
            $pdo->rollBack();
            throw $e;
        }
    }

    /** @return array<string,string> */
    public static function all(): array
    {
        $pdo = Database::pdo();
        self::ensureTable($pdo);

        $rows = $pdo->query('SELECT `key`,`value` FROM `app_settings`')->fetchAll(PDO::FETCH_ASSOC);
        $out = [];
        foreach ($rows as $r) { $out[(string)$r['key']] = (string)$r['value']; }
        return $out;
    }
}
