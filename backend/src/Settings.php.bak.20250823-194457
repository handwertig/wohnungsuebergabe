<?php
declare(strict_types=1);

namespace App;

use PDO;

final class Settings
{
    public static function get(string $key, $default = null)
    {
        $pdo = Database::pdo();
        $st  = $pdo->prepare('SELECT value FROM app_settings WHERE `key`=? LIMIT 1');
        $st->execute([$key]);
        $v = $st->fetchColumn();
        return ($v === false) ? $default : $v;
    }

    public static function set(string $key, string $value): void
    {
        $pdo = Database::pdo();
        $st = $pdo->prepare('INSERT INTO app_settings(`key`,`value`) VALUES(?,?) ON DUPLICATE KEY UPDATE value=VALUES(value)');
        $st->execute([$key, $value]);
    }

    /** @param array<string,string> $data */
    public static function setMany(array $data): void
    {
        if (!$data) return;
        $pdo = Database::pdo();
        $pdo->beginTransaction();
        try {
            $st = $pdo->prepare('INSERT INTO app_settings(`key`,`value`) VALUES(?,?) ON DUPLICATE KEY UPDATE value=VALUES(value)');
            foreach ($data as $k=>$v) {
                $st->execute([$k, (string)$v]);
            }
            $pdo->commit();
        } catch (\Throwable $e) {
            $pdo->rollBack();
            throw $e;
        }
    }

    /** @return array<string,string> */
    public static function all(): array
    {
        $pdo = Database::pdo();
        $rows = $pdo->query('SELECT `key`,`value` FROM app_settings')->fetchAll(PDO::FETCH_ASSOC);
        $out=[];
        foreach ($rows as $r) $out[$r['key']] = (string)$r['value'];
        return $out;
    }
}
